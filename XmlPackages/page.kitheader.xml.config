<?xml version="1.0" encoding="utf-8" ?>
<!-- ##################################################################################	-->
<!-- Copyright AspDotNetStorefront.com. All Rights Reserved.							-->
<!-- http://www.aspdotnetstorefront.com													-->
<!-- For details on this license please visit the product homepage at the URL above.	-->
<!-- THE ABOVE NOTICE MUST REMAIN INTACT.												-->
<!-- ##################################################################################	-->
<package displayname="Kit Product" version="2.1" debug="false" includeentityhelper="true">
	<query name="Products" rowElementName="Product">
		<sql>
			<![CDATA[
                SELECT p.*, pv.VariantID, pv.price, isnull(pv.saleprice, 0) saleprice, isnull(pv.colors, '') Colors,
				case when pcl.productid is null then 0 else isnull(e.Price, 0) end ExtendedPrice
                FROM dbo.PRODUCT p  with (nolock)
                    join dbo.PRODUCTVARIANT pv with (nolock) on p.ProductID = pv.ProductID 
                    left join dbo.ProductCustomerLevel pcl with (nolock) on p.ProductID = pcl.ProductID and pcl.CustomerLevelID=@CustomerLevelID
					          left join dbo.ExtendedPrice e with (nolock) on pv.VariantID=e.VariantID and e.CustomerLevelID=@CustomerLevelID
                where p.ProductID = @ProductID 
                    and pv.isdefault = 1
                    and case 
                            when @FilterProductsByCustomerLevel = 'false' then 1
                            when @CustomerLevelFilteringIsAscending = 'true' and (pcl.CustomerLevelID <= @CustomerLevelID or pcl.CustomerLevelID is null) then 1 
				            when @CustomerLevelID=0 and pcl.CustomerLevelID is null then 1
                            when pcl.CustomerLevelID = @CustomerLevelID  or pcl.CustomerLevelID is null then 1 
                            else 0
                        end  = 1
            ]]>
		</sql>
		<queryparam paramname="@ProductID" paramtype="request" requestparamname="ProductID" sqlDataType="int" defvalue="0" validationpattern="^\d{1,10}$" />
		<queryparam paramname="@CustomerLevelID" paramtype="runtime" requestparamname="CustomerLevelID" sqlDataType="int" defvalue="0"  validationpattern="" />
		<queryparam paramname="@FilterProductsByCustomerLevel" paramtype="appconfig" requestparamname="FilterProductsByCustomerLevel" sqlDataType="varchar" defvalue="false"  validationpattern="" />
		<queryparam paramname="@CustomerLevelFilteringIsAscending" paramtype="appconfig" requestparamname="CustomerLevelFilteringIsAscending" sqlDataType="varchar" defvalue="false"  validationpattern="" />
	</query>
	<PackageTransform>
		<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
						xmlns:aspdnsf="urn:aspdnsf"
						xmlns:kit2="urn:kit2"
						exclude-result-prefixes="kit2" >
			
			<xsl:output method="html" omit-xml-declaration="yes" />

			<xsl:param name="LocaleSetting" select="/root/Runtime/LocaleSetting" />
			<xsl:param name="WebConfigLocaleSetting" select="/root/Runtime/WebConfigLocaleSetting" />

			<xsl:param name="SecID">
				<xsl:choose>
					<xsl:when test="count(/root/QueryString/sectionid) &gt; 0">
						<xsl:value-of select="/root/QueryString/sectionid" />
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:param>


			<xsl:param name="CatID">
				<xsl:choose>
					<xsl:when test="count(/root/QueryString/categoryid) &gt; 0">
						<xsl:value-of select="/root/QueryString/categoryid" />
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:param>


			<xsl:param name="ManID">
				<xsl:choose>
					<xsl:when test="count(/root/QueryString/manufacturerid) &gt; 0">
						<xsl:value-of select="/root/QueryString/manufacturerid" />
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:param>

			<xsl:param name="CartRecID">
				<xsl:choose>
					<xsl:when test="/root/QueryString/cartrecid">
						<xsl:value-of select="/root/QueryString/cartrecid" />
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:param>
      <xsl:variable name="ProductIdsOnPage">
        <xsl:for-each select="/root/Products/Product/ProductID">
          <xsl:value-of select="." />
          <xsl:if test="position() != last()">
            <xsl:text>,</xsl:text>
          </xsl:if>
        </xsl:for-each>
      </xsl:variable>
      <xsl:variable name="AvailablePromotions" select="aspdnsf:XmlPackageAsXml('availablePromotions.xml.config', concat('productIdList=', $ProductIdsOnPage))/root/Promotions" />

      <xsl:template match="/">
				<xsl:choose>
					<xsl:when test="/root/Products/Product/IsAKit='0'">
						<b>This XMLPackage is designed to work with Kit products only</b>
					</xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="/root/Products/Product"></xsl:apply-templates>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:template>

			<xsl:template match="Product">
				<xsl:param name="pName" select="aspdnsf:GetMLValue(Name)"></xsl:param>
				<xsl:param name="pDescription" select="aspdnsf:GetMLValue(Description)"></xsl:param>
				<xsl:param name="HidePriceUntilCart" select="HidePriceUntilCart" />
				<xsl:param name="ProductID" select="ProductID" />
				<xsl:param name="q">
					<xsl:if test="$CartRecID&gt;0">
						?CartRecID=<xsl:value-of select="$CartRecID" />
					</xsl:if>
				</xsl:param>
				<xsl:param name="EntityID">
					<xsl:value-of select="/root/Runtime/EntityID"/>
				</xsl:param>
				<xsl:param name="EntityName">
					<xsl:value-of select="/root/Runtime/EntityName"/>
				</xsl:param>
        <xsl:param name="pSEAltText" select="aspdnsf:GetMLValue(SEAltText)"></xsl:param>
        <xsl:param name="AltText">
          <xsl:choose>
            <xsl:when test="$pSEAltText=''">
              <xsl:value-of select="$pName" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$pSEAltText" />
            </xsl:otherwise>
          </xsl:choose>
        </xsl:param>
        <xsl:variable name="productId" select="ProductID" />

        <!-- Product Info Section -->
				<table border="0" cellpadding="0" cellspacing="4" width="100%">
					<tr>
						<td align="center" valign="top" width="40%">
							<xsl:value-of select="aspdnsf:LookupProductImage(ProductID, ImageFilenameOverride, SKU, 'medium', 1, $AltText)" disable-output-escaping="yes"/>
						</td>
						<td align="left" valign="top" >
							<table border="0" cellpadding="0" cellspacing="0" width="100%">
								<tr>
									<td align="right">
										<xsl:value-of select="aspdnsf:ProductNavLinks(ProductID, /root/Runtime/EntityID, /root/Runtime/EntityName, /root/EntityHelpers/*[name()=/root/Runtime/EntityName]/descendant::Entity[EntityID=/root/Runtime/EntityID]/SEName, 0, 1, 1)" disable-output-escaping="yes" />
									</td>
								</tr>
								<tr>
									<td align="left" valign="top" width="40%">
										<div  class="ProductNameText">
											<xsl:value-of select="aspdnsf:Decode($pName)" disable-output-escaping="yes"/>
										</div>
										<xsl:value-of select="aspdnsf:ProductSpecsLink(ProductID, SpecsInline, SpecTitle, SKU, SpecCall)" disable-output-escaping="yes" />
										<br/>
										<xsl:value-of select="aspdnsf:EmailProductToFriend(ProductID, $CatID)" disable-output-escaping="yes"/>
										<div align="left">
											<xsl:value-of select="aspdnsf:Decode($pDescription)" disable-output-escaping="yes"/>
										</div>
                    <xsl:apply-templates select="$AvailablePromotions/Promotion[ProductId=$productId]" />

                    <xsl:value-of select="aspdnsf:ShowQuantityDiscountTable(ProductID)" disable-output-escaping="yes" />
										<xsl:value-of select="aspdnsf:ShowInventoryTable(ProductID)" disable-output-escaping="yes" />
									</td>
								</tr>
								<tr valign="top">
									<td height="10"></td>
								</tr>
							</table>
						</td>
					</tr>
				</table>

        <br clear="all" />
				<div style="border-top-style:none;border-bottom:solid 1px #ccc" />
				<br clear="all" />

				<!-- End - Product Info Section -->				
			</xsl:template>
      <xsl:template match="Promotion">
        <div class="promotionCallToAction">
          <xsl:value-of select="CallToAction" />
        </div>
      </xsl:template>

    </xsl:stylesheet>
	</PackageTransform>
</package>
